<?php //[STAMP] 1049db5505f0bc4a9f38312017bbf86c

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile


use Codeception\Module\SmtpMailerHelper;
use Codeception\Module\ZendMailerHelper;
use Codeception\Module\MailChecker;
use Codeception\Module\Sequence;
use Codeception\Module\Asserts;

/**
 * Inherited Methods
 * @method void wantToTest($text)
 * @method void wantTo($text)
 * @method void execute($callable)
 * @method void expectTo($prediction)
 * @method void expect($prediction)
 * @method void amGoingTo($argumentation)
 * @method void am($role)
 * @method void lookForwardTo($achieveValue)
 * @method void comment($description)
 * @method void haveFriend($name)
*/
class AcceptanceTester extends \Codeception\Actor
{
   
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\ZendMailerHelper::sendEmail()
     */
    public function sendEmail($from, $to, $subject, $body) {
        return $this->scenario->runStep(new \Codeception\Step\Action('sendEmail', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\BaseMailerHelper::haveMailProvider()
     */
    public function haveMailProvider($provider) {
        return $this->scenario->runStep(new \Codeception\Step\Action('haveMailProvider', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Clear provider mail box emails
     *
     * Clear all emails from provider. You probably want to do this before
     * you do the thing that will send emails
     *
     * @see \Codeception\Module\MailChecker::clearMailbox()
     */
    public function clearMailbox() {
        return $this->scenario->runStep(new \Codeception\Step\Action('clearMailbox', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See In Last Email
     *
     * Look for a string in the most recent email
     *
     * @param $expected
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\MailChecker::seeInLastEmail()
     */
    public function canSeeInLastEmail($expected) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeInLastEmail', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See In Last Email
     *
     * Look for a string in the most recent email
     *
     * @param $expected
     * @see \Codeception\Module\MailChecker::seeInLastEmail()
     */
    public function seeInLastEmail($expected) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeInLastEmail', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See In Last Email subject
     *
     * Look for a string in the most recent email subject
     *
     * @param $expected
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\MailChecker::seeInLastEmailSubject()
     */
    public function canSeeInLastEmailSubject($expected) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeInLastEmailSubject', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See In Last Email subject
     *
     * Look for a string in the most recent email subject
     *
     * @param $expected
     * @see \Codeception\Module\MailChecker::seeInLastEmailSubject()
     */
    public function seeInLastEmailSubject($expected) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeInLastEmailSubject', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Don't See In Last Email subject
     *
     * Look for the absence of a string in the most recent email subject
     *
     * @param $expected
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\MailChecker::dontSeeInLastEmailSubject()
     */
    public function cantSeeInLastEmailSubject($expected) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInLastEmailSubject', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Don't See In Last Email subject
     *
     * Look for the absence of a string in the most recent email subject
     *
     * @param $expected
     * @see \Codeception\Module\MailChecker::dontSeeInLastEmailSubject()
     */
    public function dontSeeInLastEmailSubject($expected) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeInLastEmailSubject', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Don't See In Last Email
     *
     * Look for the absence of a string in the most recent email
     *
     * @param $unexpected
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\MailChecker::dontSeeInLastEmail()
     */
    public function cantSeeInLastEmail($unexpected) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInLastEmail', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Don't See In Last Email
     *
     * Look for the absence of a string in the most recent email
     *
     * @param $unexpected
     * @see \Codeception\Module\MailChecker::dontSeeInLastEmail()
     */
    public function dontSeeInLastEmail($unexpected) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeInLastEmail', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See In Last Email To
     *
     * Look for a string in the most recent email sent to $address
     *
     * @param $address
     * @param $expected
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\MailChecker::seeInLastEmailTo()
     */
    public function canSeeInLastEmailTo($address, $expected) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeInLastEmailTo', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See In Last Email To
     *
     * Look for a string in the most recent email sent to $address
     *
     * @param $address
     * @param $expected
     * @see \Codeception\Module\MailChecker::seeInLastEmailTo()
     */
    public function seeInLastEmailTo($address, $expected) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeInLastEmailTo', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Don't See In Last Email To
     *
     * Look for the absence of a string in the most recent email sent to $address
     *
     * @param $address
     * @param $unexpected
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\MailChecker::dontSeeInLastEmailTo()
     */
    public function cantSeeInLastEmailTo($address, $unexpected) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInLastEmailTo', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Don't See In Last Email To
     *
     * Look for the absence of a string in the most recent email sent to $address
     *
     * @param $address
     * @param $unexpected
     * @see \Codeception\Module\MailChecker::dontSeeInLastEmailTo()
     */
    public function dontSeeInLastEmailTo($address, $unexpected) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeInLastEmailTo', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See In Last Email Subject To
     *
     * Look for a string in the most recent email subject sent to $address
     *
     * @param $address
     * @param $expected
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\MailChecker::seeInLastEmailSubjectTo()
     */
    public function canSeeInLastEmailSubjectTo($address, $expected) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeInLastEmailSubjectTo', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See In Last Email Subject To
     *
     * Look for a string in the most recent email subject sent to $address
     *
     * @param $address
     * @param $expected
     * @see \Codeception\Module\MailChecker::seeInLastEmailSubjectTo()
     */
    public function seeInLastEmailSubjectTo($address, $expected) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeInLastEmailSubjectTo', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Don't See In Last Email Subject To
     *
     * Look for the absence of a string in the most recent email subject sent to $address
     *
     * @param $address
     * @param $unexpected
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\MailChecker::dontSeeInLastEmailSubjectTo()
     */
    public function cantSeeInLastEmailSubjectTo($address, $unexpected) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInLastEmailSubjectTo', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Don't See In Last Email Subject To
     *
     * Look for the absence of a string in the most recent email subject sent to $address
     *
     * @param $address
     * @param $unexpected
     * @see \Codeception\Module\MailChecker::dontSeeInLastEmailSubjectTo()
     */
    public function dontSeeInLastEmailSubjectTo($address, $unexpected) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeInLastEmailSubjectTo', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grab Matches From Last Email
     *
     * Look for a regex in the email source and return it's matches
     *
     * @param $regex
     *
     * @return array
     * @see \Codeception\Module\MailChecker::grabMatchesFromLastEmail()
     */
    public function grabMatchesFromLastEmail($regex) {
        return $this->scenario->runStep(new \Codeception\Step\Action('grabMatchesFromLastEmail', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grab From Last Email
     *
     * Look for a regex in the email source and return it
     *
     * @param $regex
     *
     * @return string
     * @see \Codeception\Module\MailChecker::grabFromLastEmail()
     */
    public function grabFromLastEmail($regex) {
        return $this->scenario->runStep(new \Codeception\Step\Action('grabFromLastEmail', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grab Matches From Last Email To
     *
     * Look for a regex in most recent email sent to $address email source and
     * return it's matches
     *
     * @param $address
     * @param $regex
     *
     * @return array
     * @see \Codeception\Module\MailChecker::grabMatchesFromLastEmailTo()
     */
    public function grabMatchesFromLastEmailTo($address, $regex) {
        return $this->scenario->runStep(new \Codeception\Step\Action('grabMatchesFromLastEmailTo', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Grab From Last Email To
     *
     * Look for a regex in most recent email sent to $address email source and
     * return it
     *
     * @param $address string
     * @param $regex string
     *
     * @return string
     * @see \Codeception\Module\MailChecker::grabFromLastEmailTo()
     */
    public function grabFromLastEmailTo($address, $regex) {
        return $this->scenario->runStep(new \Codeception\Step\Action('grabFromLastEmailTo', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Test email count equals expected value
     *
     * @param $expected int
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\MailChecker::seeEmailCount()
     */
    public function canSeeEmailCount($expected) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeEmailCount', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Test email count equals expected value
     *
     * @param $expected int
     * @see \Codeception\Module\MailChecker::seeEmailCount()
     */
    public function seeEmailCount($expected) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeEmailCount', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that two variables are equal.
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     *
     * @return mixed
     * @see \Codeception\Module\Asserts::assertEquals()
     */
    public function assertEquals($expected, $actual, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that two variables are not equal
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotEquals()
     */
    public function assertNotEquals($expected, $actual, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertNotEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that expected is greater then actual
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertGreaterThen()
     */
    public function assertGreaterThen($expected, $actual, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertGreaterThen', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that expected is greater or equal then actual
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertGreaterThenOrEqual()
     */
    public function assertGreaterThenOrEqual($expected, $actual, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertGreaterThenOrEqual', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that haystack contains needle
     *
     * @param        $needle
     * @param        $haystack
     * @param string $message
     * @see \Codeception\Module\Asserts::assertContains()
     */
    public function assertContains($needle, $haystack, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertContains', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that haystack doesn't contain needle.
     *
     * @param        $needle
     * @param        $haystack
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotContains()
     */
    public function assertNotContains($needle, $haystack, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertNotContains', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that variable is empty.
     *
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertEmpty()
     */
    public function assertEmpty($actual, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertEmpty', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that variable is not empty.
     *
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotEmpty()
     */
    public function assertNotEmpty($actual, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertNotEmpty', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that variable is NULL
     *
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNull()
     */
    public function assertNull($actual, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertNull', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that variable is not NULL
     *
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotNull()
     */
    public function assertNotNull($actual, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertNotNull', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that condition is positive.
     *
     * @param        $condition
     * @param string $message
     * @see \Codeception\Module\Asserts::assertTrue()
     */
    public function assertTrue($condition, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertTrue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that condition is negative.
     *
     * @param        $condition
     * @param string $message
     * @see \Codeception\Module\Asserts::assertFalse()
     */
    public function assertFalse($condition, $message = null) {
        return $this->scenario->runStep(new \Codeception\Step\Action('assertFalse', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Fails the test with message.
     *
     * @param $message
     * @see \Codeception\Module\Asserts::fail()
     */
    public function fail($message) {
        return $this->scenario->runStep(new \Codeception\Step\Action('fail', func_get_args()));
    }
}
